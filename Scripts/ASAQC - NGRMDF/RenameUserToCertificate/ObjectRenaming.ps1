Param (
    [string]$sourcePath = "C:\Users\kebec\Documents\SQL Server Management Studio\Projects\ASAQC - NGRMDF\RenameUserToCertificate\source",
    [string]$definitionsFileName = "RenameMapping.json",
    [string]$outputPath = "C:\Users\kebec\Documents\SQL Server Management Studio\Projects\ASAQC - NGRMDF\RenameUserToCertificate\renamed"
)

$psInvokationPath = (Split-Path -Path $MyInvocation.MyCommand.Definition -Parent -ErrorAction SilentlyContinue);

$settingspath = Join-Path $psInvokationPath $definitionsFileName;
$settings = Get-Content $settingspath | Out-String | ConvertFrom-Json;

# Find all matching "source" files
$sourceFiles = Get-ChildItem -Path $sourcePath -Recurse

# Iterate all source Files
Foreach ($file in $sourceFiles) {
    $fileName = $file.Name;
    if ($null -ne $file.Directory.FullName) {

        $fileName = $file.Directory.FullName.Replace($sourcePath, '') + "\" + $fileName;
        
        $destinationFileName = $outputPath + "\" + $file.Name;
        
        # Create destination folder if does not exist
        $destinationFolder = Split-Path -Path $destinationFileName;
        if (New-Item -Force -ItemType directory -Path $destinationFolder) {
            Write-Verbose "  Created directory `"\$($destinationFolder.ToString())`"";
        }
        
        # Copy the files and replace texts in them
        (Get-Content $file.PSPath) |
        Foreach-Object {
            $thisLine = $_;
            $alteredLine = $_;
            # Iterate all replace Values
            foreach ($replaceKVP in $settings.PSObject.Properties) {
                $alteredLine = $alteredLine -replace $replaceKVP.Name, $replaceKVP.Value;
            }
            If($thisLine -ne $alteredLine) { Write-host $alteredLine; }
            $alteredLine;
        } | Set-Content $destinationFileName;
        Write-Verbose "  Written file `"$($destinationFileName)`"";

        # Remove trailing CRLF generated by PowerShell (just for convenience)
        $stream = [IO.File]::Open($destinationFileName, [IO.FileMode]::Open);
        $stream.Position = $stream.Length - 2;
        $bytes = 0..1 | ForEach-Object { $stream.ReadByte() };
        $compareBytes = 13, 10; # CR,LF
        if ("$bytes" -eq "$compareBytes") {
            $stream.SetLength($stream.Length - 2);
        }
        $stream.Close();
        $stream.Dispose();
    }
}